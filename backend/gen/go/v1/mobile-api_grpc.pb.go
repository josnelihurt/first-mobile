// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: mobile-api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MobileAPIService_Info_FullMethodName      = "/josnelihurt.mobile_api_stub.gen.MobileAPIService/Info"
	MobileAPIService_Boot_FullMethodName      = "/josnelihurt.mobile_api_stub.gen.MobileAPIService/Boot"
	MobileAPIService_StreamSMS_FullMethodName = "/josnelihurt.mobile_api_stub.gen.MobileAPIService/StreamSMS"
)

// MobileAPIServiceClient is the client API for MobileAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MobileAPIServiceClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Boot(ctx context.Context, in *BootRequest, opts ...grpc.CallOption) (*BootResponse, error)
	StreamSMS(ctx context.Context, in *StreamSMSRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamSMSResponse], error)
}

type mobileAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMobileAPIServiceClient(cc grpc.ClientConnInterface) MobileAPIServiceClient {
	return &mobileAPIServiceClient{cc}
}

func (c *mobileAPIServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, MobileAPIService_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileAPIServiceClient) Boot(ctx context.Context, in *BootRequest, opts ...grpc.CallOption) (*BootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BootResponse)
	err := c.cc.Invoke(ctx, MobileAPIService_Boot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileAPIServiceClient) StreamSMS(ctx context.Context, in *StreamSMSRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamSMSResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MobileAPIService_ServiceDesc.Streams[0], MobileAPIService_StreamSMS_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamSMSRequest, StreamSMSResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MobileAPIService_StreamSMSClient = grpc.ServerStreamingClient[StreamSMSResponse]

// MobileAPIServiceServer is the server API for MobileAPIService service.
// All implementations must embed UnimplementedMobileAPIServiceServer
// for forward compatibility.
type MobileAPIServiceServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Boot(context.Context, *BootRequest) (*BootResponse, error)
	StreamSMS(*StreamSMSRequest, grpc.ServerStreamingServer[StreamSMSResponse]) error
	mustEmbedUnimplementedMobileAPIServiceServer()
}

// UnimplementedMobileAPIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMobileAPIServiceServer struct{}

func (UnimplementedMobileAPIServiceServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMobileAPIServiceServer) Boot(context.Context, *BootRequest) (*BootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Boot not implemented")
}
func (UnimplementedMobileAPIServiceServer) StreamSMS(*StreamSMSRequest, grpc.ServerStreamingServer[StreamSMSResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSMS not implemented")
}
func (UnimplementedMobileAPIServiceServer) mustEmbedUnimplementedMobileAPIServiceServer() {}
func (UnimplementedMobileAPIServiceServer) testEmbeddedByValue()                          {}

// UnsafeMobileAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MobileAPIServiceServer will
// result in compilation errors.
type UnsafeMobileAPIServiceServer interface {
	mustEmbedUnimplementedMobileAPIServiceServer()
}

func RegisterMobileAPIServiceServer(s grpc.ServiceRegistrar, srv MobileAPIServiceServer) {
	// If the following call pancis, it indicates UnimplementedMobileAPIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MobileAPIService_ServiceDesc, srv)
}

func _MobileAPIService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileAPIServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileAPIService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileAPIServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobileAPIService_Boot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileAPIServiceServer).Boot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileAPIService_Boot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileAPIServiceServer).Boot(ctx, req.(*BootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobileAPIService_StreamSMS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSMSRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MobileAPIServiceServer).StreamSMS(m, &grpc.GenericServerStream[StreamSMSRequest, StreamSMSResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MobileAPIService_StreamSMSServer = grpc.ServerStreamingServer[StreamSMSResponse]

// MobileAPIService_ServiceDesc is the grpc.ServiceDesc for MobileAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MobileAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "josnelihurt.mobile_api_stub.gen.MobileAPIService",
	HandlerType: (*MobileAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _MobileAPIService_Info_Handler,
		},
		{
			MethodName: "Boot",
			Handler:    _MobileAPIService_Boot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSMS",
			Handler:       _MobileAPIService_StreamSMS_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mobile-api.proto",
}
